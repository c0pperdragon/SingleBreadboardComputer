; Needs to be included in a user-code program (see examples)

    .advance $FC00, $FF
boot:
    SEI       ; disable interrupts
    CMP $00   ; set output to high
    ; initial delay to await reset bouncing
    LDX #0
*   INX
    BNE -
    ; set up stack in case it was damaged
    LDX #$FF
    TXS
    ; call user code 
    JSR main
    ; delay
    LDX #0
    LDY #0
*   INY
    BNE -
    INX 
    BNE -
    JMP boot
    
    ; send one byte via serial 
    ; does not damage any zero page data
    ; parameter: A 
send:
    EOR #$FF ; use inverted bits, so stop-bit matches up
    LDX #10  ; send 10 bits total
    SEC      ; prepare inverted start bit
sendloop:                               ;  total cycles
    BCC setoutputhigh                   ;  0     2/3
setoutputlow:                           ;
    INC $8000  ; multibyte-operation    ;  2     6
    JMP setoutputdone                   ;  8     3
setoutputhigh:
    CMP $00    ; any access to RAM      ;  3     3
    CMP $00                             ;  6     3
    NOP                                 ;  9     2
setoutputdone:
    LDY #19                             ;  11    2
*   DEY                                 ;  13    5*n-1 = 94
    BNE -                               ;
    NOP                                 ;  107   2
    NOP                                 ;  109   2
    NOP                                 ;  111   2
    NOP                                 ;  113   2
    LSR  ; next bit (when empty, 0)     ;  115   2
    DEX                                 ;  117   2
    BNE sendloop                        ;  119   3
                                        ;  122 (115200 baud @14Mhz)
    RTS

    ; send null-terminated string
    ; parameter: Y,X = address of string (X = high byte)
    ; overwrite zero page $00,$01
sendstr:
    ; pointer
    STY $00
    STX $01
sendstrloop:
    LDY #0
    LDA ($00),Y
    BEQ sendstrend
    JSR send
    INC $00
    BNE sendstrloop
    INC $01
    JMP sendstrloop
sendstrend:
    RTS    

    ; read state of the IRQB pin
    ; return: c flag is set if the pin is low
    ; the whole procedure takes 42 cycles including
    ; the calling JSR
    ; the sampling point is at 10 clocks 
getirqb:                        ; total cycles
    CLC                         ; 6     2
    CLI                         ; 8     2
      ; <- possible interrupt     10    0/22
    SEI                         ; 10/32 2
    BCC +                       ; 12/34 3/2
    RTS                         ;    36 6
*   PHA                         ; 15    4
    PLA                         ; 19    3
    PHA                         ; 22    4
    PLA                         ; 26    3
    PHA                         ; 29    4
    PLA                         ; 33    3
    RTS                         ; 36    6
                                ; 42/42
                                
    ; Interrupt handler to trigger when the IRQB pin is low. 
    ; It will just set the C flag (and damage the A register). 
    ; Also it will disable interrupts upon exit.
irqhandler:                     ;       
    PLA                         ; 7     4
    ORA #$05                    ; 11    2
    PHA                         ; 13    3
    RTI                         ; 16    6
                                ; 22

    ; vector table
    .advance $FFFA, $FF
    .word boot       ; NMIB
    .word boot       ; RESB
    .word irqhandler ; BRK/IRQB
